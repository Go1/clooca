{"version":3,"sources":["common/core/project/index.js"],"names":["projectLoader","require","repository","module","exports","init","clooca","list","then","projects","length","getPlugin","request","Promise","resolve","reject","templateprojects","all","map","p","save","key","data","setTimeout","load","projectId","storage","getStorage","modelInterface","createModelInterface","loadProject","projectData","required","loadRequiredTasks","requiredModel","loadModel","uri","modelJson","url","model","models","loadModelTasks","import","loadTasks","concat","reduce","a","b","name","saveProject","delete","deleteProject","listProjects"],"mappings":"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","file":"index.js","sourcesContent":["var projectLoader = require('../../storage/project');\nvar repository = require('../../storage/repository');\n\nmodule.exports = {\n\tinit: function(clooca) {\n\t\treturn this.list(clooca).then((projects)=>{\n\t\t\tif(projects.length == 0) {\n\t\t\t\treturn clooca.getPlugin('clooca').request('templateProject', {});\n\t\t\t}else{\n\t\t\t\treturn new Promise((resolve, reject)=>{resolve([]);});\n\t\t\t}\n\t\t}).then((templateprojects)=>{\n\t\t\treturn Promise.all(templateprojects.map((p)=>{\n\t\t\t\tthis.save(clooca, p.key, p.data);\n\t\t\t}))\n\t\t}).then((projects)=>{\n\t\t\treturn new Promise((resolve, reject)=>{\n\t\t\t\tsetTimeout(resolve, 1000);\n\t\t\t});\n\t\t});\n\t},\n\tload: function(clooca, projectId) {\n\t\tvar storage = clooca.getStorage();\n\t\tvar modelInterface = clooca.createModelInterface();\n\t\treturn projectLoader.loadProject(storage, projectId).then((projectData)=>{\n\t\t\tvar required = projectData.required || [];\n\t\t\tvar loadRequiredTasks = required.map((requiredModel)=>{\n\t\t\t\treturn function() {\n\t\t\t\t\treturn repository.loadModel(storage, requiredModel.uri).then(function(modelJson) {\n\t\t\t\t\t\tif(modelJson || requiredModel.uri == 'http://www.eclipse.org/emf/2002/Ecore') {\n\t\t\t\t\t\t\treturn modelInterface.loadModel(requiredModel.uri, modelJson, 'r');\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t    return clooca.getPlugin('clooca').request('findEcoreModel', {url: requiredModel.uri}).then((model)=>{\n\t\t\t\t\t\t    \treturn modelInterface.loadModel( requiredModel.uri, model, 'r');\n\t\t\t\t\t\t    });\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t\tvar models = projectData.models || [];\n\t\t\tvar loadModelTasks = models.map((requiredModel)=>{\n\t\t\t\treturn function() {\n\t\t\t\t\treturn repository.loadModel(storage, requiredModel.uri).then(function(modelJson) {\n\t\t\t\t\t\tif(!modelJson && requiredModel.import) {\n\t\t\t\t\t\t    return clooca.getPlugin('clooca').request('findEcoreModel', {url: requiredModel.uri}).then((model)=>{\n\t\t\t\t\t\t    \treturn modelInterface.loadModel( requiredModel.uri, model, 'w');\n\t\t\t\t\t\t    });\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\treturn modelInterface.loadModel(requiredModel.uri, modelJson, 'w');\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t\tvar loadTasks = loadRequiredTasks.concat(loadModelTasks);\n\t\t\treturn loadTasks.reduce(function (a, b) {\n\t\t\t\treturn a.then(b);\n\t\t\t}, Promise.resolve(null));\n\t\t});\n\t},\n\tsave: function(clooca, name, data) {\n\t\treturn projectLoader.saveProject(clooca.getStorage(), name, data);\n\t},\n\tdelete: function(clooca, name) {\n\t\treturn projectLoader.deleteProject(clooca.getStorage(), name);\n\t},\n\tlist: function(clooca) {\n\t\treturn projectLoader.listProjects(clooca.getStorage());\n\t}\n}"]}