{"version":3,"sources":["client/components/editor/index.js"],"names":["React","require","project","pluginLoader","PluginItem","TabComponent","PluginPanel","Header","SplitPane","TabAction","ModalAction","EditorStore","AlertModal","register","CoreComponent","createClass","getInitialState","pluginNames","isOpen","errorMessage","componentWillMount","setState","bind","console","log","props","params","load","clooca","projectId","then","catch","err","message","observe","data","editorSettings","componentDidMount","componentDidUpdate","componentWillUnmount","onCloseAlert","changePlugin","pluginName","plugin","render","self","content","state","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["var React = require('react');\n\nvar project = require('../../../common/core/project');\nvar pluginLoader = require('../../pluginLoader');\n\nvar PluginItem = require('../plugin/item');\nvar TabComponent = require('../tab');\nvar PluginPanel = require('../plugin/panel');\nvar Header = require('./header');\nvar SplitPane = require('react-split-pane');\nvar TabAction = require('../../actions/tab');\nvar ModalAction = require('../../actions/modal');\nvar EditorStore = require('../../store/editor');\nvar AlertModal = require('../modal/alert');\n\nTabAction.register(EditorStore);\nModalAction.register(EditorStore);\n\nlet CoreComponent = React.createClass({\n\n  getInitialState: function () {\n    return {\n      pluginNames: [],\n      isOpen: false,\n      errorMessage: ''\n    };\n  },\n\n  componentWillMount: function() {\n  \tlet setState = this.setState.bind(this);\n    console.log(this.props.params);\n    project.load(clooca, this.props.params.projectId).then(()=>{\n      return pluginLoader();\n    }).then((pluginNames)=>{\n      setState({\n        pluginNames: pluginNames\n      })\n    }).catch((err) => {\n      setState({\n        isOpen: true,\n        errorMessage: err.message\n      });\n    })\n\n    EditorStore.observe((data) => {\n      setState({\n        editorSettings: data\n      });\n    });\n  },\n\n  componentDidMount: function () {\n  },\n\n  componentDidUpdate: function () {\n  },\n\n  componentWillUnmount : function() {\n  },\n\n  onCloseAlert: function() {\n    this.setState({\n      isOpen: false,\n      errorMessage: ''\n    });\n  },\n\n  changePlugin: function(pluginName) {\n    console.log(pluginName);\n  \tthis.setState({\n  \t\tplugin: pluginName\n  \t});\n  },\n\n  render: function () {\n    var self = this;\n  \tvar content = (<div className=\"loading-animation\"/>);\n    return (\n    \t<div>\n        <Header pluginNames={this.state.pluginNames} editorSettings={this.state.editorSettings}></Header>\n        <SplitPane split=\"vertical\" minSize={150} defaultSize={200}>\n          <div>\n            <PluginPanel plugin=\"explorer\"></PluginPanel>\n          </div>\n          <div>\n            <TabComponent editorSettings={this.state.editorSettings}></TabComponent>\n          </div>\n          <div className=\"core-main\">\n          </div>\n        </SplitPane>\n        <AlertModal isOpen={this.state.isOpen} title={\"Model Loading Error\"} message={this.state.errorMessage} onClose={this.onCloseAlert} ></AlertModal>\n    \t</div>\n    );\n  }\n});\n\nmodule.exports = CoreComponent;"]}