{"version":3,"sources":["client/clooca.js"],"names":["PluginInterface","require","registry","ModalAction","LocalStorage","registerdPlugins","settings","modelInterface","methodName","params","open","Promise","resolve","reject","name","pluginName","pluginModule","addModule"],"mappings":";;;;;;;;AAAA;;;;;;;;AACA,IAAIA,kBAAkBC,QAAQ,gCAAR,CAAtB;AACA,IAAIC,WAAWD,QAAQ,yBAAR,CAAf;AACA,IAAIE,cAAcF,QAAQ,iBAAR,CAAlB;AACA,IAAIG,eAAeH,QAAQ,wCAAR,CAAnB;;;AAGC,mBAAc;AAAA;;AACb,OAAKI,gBAAL,GAAwB,EAAxB;AACA,OAAKC,QAAL,GAAgB,IAAhB;AACA;;;;yCAEsB;AACtB,QAAKC,cAAL,GAAsB,qBAAtB;AACA,UAAO,KAAKA,cAAZ;AACA;;;sCAEmB;AACnB,UAAO,KAAKA,cAAZ;AACA;;;8BAEWD,Q,EAAU;AACrB,QAAKA,QAAL,GAAgBA,QAAhB;AACA;;;4BAESE,U,EAAY;AACrB,UAAOA,cAAc,OAArB;AACA;;;8BAEWA,U,EAAYC,M,EAAQ;AAC/B,UAAO,KAAKD,UAAL,EAAiBC,MAAjB,CAAP;AACA;;;wBAEKA,M,EAAQ;AACbN,eAAYO,IAAZ,CAAiBD,MAAjB;AACA,UAAO,IAAIE,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAmB;AACrCD,YAAQ,IAAR;AACA,IAFM,CAAP;AAGA;;;4BAESE,I,EAAM;AACf,UAAO,IAAId,eAAJ,CAAoBc,IAApB,CAAP;AACA;;;+BAEY;AACZ,UAAOV,aAAa,KAAKE,QAAlB,CAAP;AACA;;;qCAEkBS,U,EAAY;AAC9B,UAAO,KAAKV,gBAAL,CAAsBU,UAAtB,CAAP;AACA;;;iCAEcA,U,EAAYC,Y,EAAc;AACxCd,YAASe,SAAT,CAAmBF,UAAnB,EAA+BC,YAA/B;AACA","file":"clooca.js","sourcesContent":["import ModelInterface from '../common/core/model'\nvar PluginInterface = require('../common/core/pluginInterface');\nvar registry = require('../common/core/registry');\nvar ModalAction = require('./actions/modal');\nvar LocalStorage = require('../common/storage/adaptor/localStorage');\n\nexport default class {\n\tconstructor() {\n\t\tthis.registerdPlugins = {};\n\t\tthis.settings = null;\n\t}\n\n\tcreateModelInterface() {\n\t\tthis.modelInterface = new ModelInterface();\n\t\treturn this.modelInterface;\n\t}\n\n\tgetModelInterface() {\n\t\treturn this.modelInterface;\n\t}\n\n\tsetSettings(settings) {\n\t\tthis.settings = settings;\n\t}\n\n\thasMethod(methodName) {\n\t\treturn methodName == 'modal';\n\t}\n\n\trecvRequest(methodName, params) {\n\t\treturn this[methodName](params);\n\t}\n\n\tmodal(params) {\n\t\tModalAction.open(params);\n\t\treturn new Promise((resolve, reject)=>{\n\t\t\tresolve(true);\n\t\t});\n\t}\n\n\tgetPlugin(name) {\n\t\treturn new PluginInterface(name);\n\t}\n\n\tgetStorage() {\n\t\treturn LocalStorage(this.settings);\n\t}\n\n\tgetPluginComponent(pluginName) {\n\t\treturn this.registerdPlugins[pluginName];\n\t}\n\n\tregisterPlugin(pluginName, pluginModule) {\n\t\tregistry.addModule(pluginName, pluginModule);\n\t}\n\n}"]}