{"version":3,"sources":["client/clooca.js"],"names":["PluginInterface","require","registry","ModalAction","LocalStorage","EventEmitter","registerdPlugins","settings","modelInterface","methodName","params","open","Promise","resolve","reject","name","getModule","pluginName","pluginModule","addModule","emit"],"mappings":";;;;;;;;AAAA;;;;;;;;;;;;AACA,IAAIA,kBAAkBC,QAAQ,gCAAR,CAAtB;AACA,IAAIC,WAAWD,QAAQ,yBAAR,CAAf;AACA,IAAIE,cAAcF,QAAQ,iBAAR,CAAlB;AACA,IAAIG,eAAeH,QAAQ,wCAAR,CAAnB;AACA,IAAII,eAAeJ,QAAQ,QAAR,EAAkBI,YAArC;;;;;AAGC,mBAAc;AAAA;;AAAA;;AAEb,QAAKC,gBAAL,GAAwB,EAAxB;AACA,QAAKC,QAAL,GAAgB,IAAhB;AAHa;AAIb;;;;yCAEsB;AACtB,QAAKC,cAAL,GAAsB,qBAAtB;AACA,UAAO,KAAKA,cAAZ;AACA;;;sCAEmB;AACnB,UAAO,KAAKA,cAAZ;AACA;;;8BAEWD,Q,EAAU;AACrB,QAAKA,QAAL,GAAgBA,QAAhB;AACA;;;4BAESE,U,EAAY;AACrB,UAAOA,cAAc,OAArB;AACA;;;8BAEWA,U,EAAYC,M,EAAQ;AAC/B,UAAO,KAAKD,UAAL,EAAiBC,MAAjB,CAAP;AACA;;;wBAEKA,M,EAAQ;AACbP,eAAYQ,IAAZ,CAAiBD,MAAjB;AACA,UAAO,IAAIE,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAmB;AACrCD,YAAQ,IAAR;AACA,IAFM,CAAP;AAGA;;;4BAESE,I,EAAM;AACf,UAAO,IAAIf,eAAJ,CAAoBe,IAApB,CAAP;AACA;;;iCAEcA,I,EAAM;AACpB,UAAO,CAAC,CAACb,SAASc,SAAT,CAAmBD,IAAnB,CAAT;AACA;;;+BAEY;AACZ,UAAOX,aAAa,KAAKG,QAAlB,CAAP;AACA;;;qCAEkBU,U,EAAY;AAC9B,UAAO,KAAKX,gBAAL,CAAsBW,UAAtB,CAAP;AACA;;;iCAEcA,U,EAAYC,Y,EAAc;AACxChB,YAASiB,SAAT,CAAmBF,UAAnB,EAA+BC,YAA/B;AACA,QAAKE,IAAL,CAAU,gBAAV,EAA4B,EAACH,YAAYA,UAAb,EAA5B;AACA;;;;EAtD2BZ,Y","file":"clooca.js","sourcesContent":["import ModelInterface from '../common/core/model'\nvar PluginInterface = require('../common/core/pluginInterface');\nvar registry = require('../common/core/registry');\nvar ModalAction = require('./actions/modal');\nvar LocalStorage = require('../common/storage/adaptor/localStorage');\nlet EventEmitter = require(\"events\").EventEmitter;\n\nexport default class extends EventEmitter {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.registerdPlugins = {};\n\t\tthis.settings = null;\n\t}\n\n\tcreateModelInterface() {\n\t\tthis.modelInterface = new ModelInterface();\n\t\treturn this.modelInterface;\n\t}\n\n\tgetModelInterface() {\n\t\treturn this.modelInterface;\n\t}\n\n\tsetSettings(settings) {\n\t\tthis.settings = settings;\n\t}\n\n\thasMethod(methodName) {\n\t\treturn methodName == 'modal';\n\t}\n\n\trecvRequest(methodName, params) {\n\t\treturn this[methodName](params);\n\t}\n\n\tmodal(params) {\n\t\tModalAction.open(params);\n\t\treturn new Promise((resolve, reject)=>{\n\t\t\tresolve(true);\n\t\t});\n\t}\n\n\tgetPlugin(name) {\n\t\treturn new PluginInterface(name);\n\t}\n\n\tisPluginLoaded(name) {\n\t\treturn !!registry.getModule(name);\n\t}\n\n\tgetStorage() {\n\t\treturn LocalStorage(this.settings);\n\t}\n\n\tgetPluginComponent(pluginName) {\n\t\treturn this.registerdPlugins[pluginName];\n\t}\n\n\tregisterPlugin(pluginName, pluginModule) {\n\t\tregistry.addModule(pluginName, pluginModule);\n\t\tthis.emit('pluginRegister', {pluginName: pluginName});\n\t}\n\n}"]}